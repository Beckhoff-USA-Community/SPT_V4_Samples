<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="VirtualMaster" Id="{e8eb8946-ac6b-4f9a-a349-a2038fff9f99}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK VirtualMaster EXTENDS FB_PackML_BaseModule
VAR
	Axis : FB_Component_BasicSlaveAxis := (Name := 'Virtual Master Axis');
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Aborting" Id="{0ab2a755-f479-4155-bea8-7b1b108018b5}">
      <Declaration><![CDATA[METHOD PROTECTED Aborting]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Mode is ignored
CASE SequenceState OF
	0:
		NoStateTasksToComplete := FALSE;
		SequenceState		   := SequenceState + 10;

	10: // Stop Axis - Will also Gear Out
		IF Axis.Stop() THEN
			SequenceState := SequenceState + 10;
		END_IF

	20:
		IF Axis.Stopped THEN
			SequenceState := SequenceState + 10;
		END_IF

	30: // Disable Axis 
		IF Axis.Disable() THEN
			SequenceState := SequenceState + 10;
		END_IF

	40:
		IF NOT Axis.Enabled THEN
			SequenceState := SequenceState + 10;
		END_IF

	50:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisRef" Id="{8fbb3c08-11e6-42e9-be14-c11d172359bb}">
      <Declaration><![CDATA[PROPERTY AxisRef : REFERENCE TO AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{2a15330a-5ee0-4def-aebb-a9f06cee8655}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisRef REF= Axis.Axis;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Completing" Id="{3ff898da-49a5-42a9-84dc-dd8eaed69c93}">
      <Declaration><![CDATA[METHOD PROTECTED Completing]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10:
				IF Axis.Stop() THEN
					SequenceState := SequenceState + 10;
				END_IF

			20:
				IF Axis.Stopped THEN
					SequenceState := SequenceState + 10;
				END_IF

			30:
				StateTasksComplete := TRUE;
		END_CASE
END_CASE

SUPER^.Completing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{099d02ae-52c4-4630-a76e-d553625d2bca}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicLogic]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{6642d997-98c2-45af-8731-ca9c93da577c}">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL;]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0:
		RegisterComponent(Axis);
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		IF SUPER^.Initialize() THEN
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	20:
		Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{d700bbd5-4ebd-42aa-9db1-b591835e231d}">
      <Declaration><![CDATA[METHOD PROTECTED Starting]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CommandedMode OF
	E_PMLUnitMode.Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10:
				IF Axis.Enable() THEN
					SequenceState := SequenceState + 10;
				END_IF

			20:
				IF Axis.Enabled THEN
					SequenceState := SequenceState + 10;
				END_IF

			30:
				StateTasksComplete := TRUE;
		END_CASE
END_CASE

SUPER^.Starting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping" Id="{1d286d67-4c20-4caf-b756-9a8f72182cf7}">
      <Declaration><![CDATA[METHOD PROTECTED Stopping]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLUnitMode.Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState		   := SequenceState + 10;

			10: // Stop Axis - Will also Gear Out
				IF Axis.Stop() THEN
					SequenceState := SequenceState + 10;
				END_IF

			20:
				IF Axis.Stopped THEN
					SequenceState := SequenceState + 10;
				END_IF

			30:
				StateTasksComplete := TRUE;
		END_CASE
END_CASE

SUPER^.Stopping();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>