<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="EquipmentModule" Id="{f2291b49-0a77-48a3-adbe-db7ae5aea497}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EquipmentModule EXTENDS FB_PackML_BaseModule
VAR
	//Component
	ComponentOne	: Component := (Name := 'Component One');
	EquipmentAlarms : ARRAY[1..EQUIPMENT_ALARM_COUNT] OF FB_TcAlarm;
	testCritical	: BOOL;
	testError		: BOOL;
	testWarning		: BOOL;
	testInfo		: BOOL;
	testVerbose		: BOOL;
END_VAR

VAR CONSTANT
	EQUIPMENT_ALARM_COUNT : UDINT := 6; //First is InitReferenceEvent
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Clearing" Id="{42adf519-aa2a-48f8-93ec-12526c6718b7}">
      <Declaration><![CDATA[METHOD PROTECTED Clearing]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_ClearAllEventsInClass(Alarms := EquipmentAlarms);
SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{bb8bda21-b36a-403a-b5f3-cd1c4d4d372e}">
      <Declaration><![CDATA[// Initializes event function blocks using this module's name
METHOD PROTECTED CreateEvents

// This method is called by Initialize() as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_CreateAllEventsInClass(Alarms		:= EquipmentAlarms,
						 ClassSize	:= SIZEOF(TC_Events.EquipmentModuleEvents),
						 pInitEvent := ADR(TC_EVENTS.EquipmentModuleEvents.InitReferenceEvent),
						 Prefix		:= Name);

SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{ee9be657-b87f-463e-9973-25c76b94c8d3}">
      <Declaration><![CDATA[// This method serves as the entry point for all underlying FB logic
METHOD PUBLIC CyclicLogic

// This method should be called cyclically by descendant function blocks by invoking SUPER^.CyclicLogic().  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

// AlarmHandling
IF testVerbose AND_THEN NOT EquipmentAlarms[E_EquipmentModuleEvents.VerboseEvent].bRaised THEN
	RaiseAlarm2Args(EquipmentAlarms[E_EquipmentModuleEvents.VerboseEvent], 'Note 1', 'Note 2');
ELSIF NOT testVerbose AND_THEN EquipmentAlarms[E_EquipmentModuleEvents.VerboseEvent].bRaised THEN
	EquipmentAlarms[E_EquipmentModuleEvents.VerboseEvent].Clear(0, 0);
END_IF

IF testInfo AND_THEN NOT EquipmentAlarms[E_EquipmentModuleEvents.InfoEvent].bRaised THEN
	RaiseAlarm2Args(EquipmentAlarms[E_EquipmentModuleEvents.InfoEvent], 'Note 1', 'Note 2');
ELSIF NOT testInfo AND_THEN EquipmentAlarms[E_EquipmentModuleEvents.InfoEvent].bRaised THEN
	EquipmentAlarms[E_EquipmentModuleEvents.InfoEvent].Clear(0, 0);
END_IF

IF testWarning AND_THEN NOT EquipmentAlarms[E_EquipmentModuleEvents.WarningEvent].bRaised THEN
	RaiseAlarm2Args(EquipmentAlarms[E_EquipmentModuleEvents.WarningEvent], 'Note 1', 'Note 2');
ELSIF NOT testWarning AND_THEN EquipmentAlarms[E_EquipmentModuleEvents.WarningEvent].bRaised THEN
	EquipmentAlarms[E_EquipmentModuleEvents.WarningEvent].Clear(0, 0);
END_IF

IF testError AND_THEN NOT EquipmentAlarms[E_EquipmentModuleEvents.ErrorEvent].bRaised THEN
	RaiseAlarm2Args(EquipmentAlarms[E_EquipmentModuleEvents.ErrorEvent], 'Note 1', 'Note 2');
END_IF

IF testCritical AND_THEN NOT EquipmentAlarms[E_EquipmentModuleEvents.CriticalEvent].bRaised THEN
	RaiseAlarm2Args(EquipmentAlarms[E_EquipmentModuleEvents.CriticalEvent], 'Note 1', 'Note 2');
END_IF

SUPER^.CyclicLogic();

(*
*
*		Code must be after SUPER^.CyclicLogic();
*
*)

(* Update alarm severity from this module *)
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := EquipmentAlarms, CurrentSeverity := _CurrentAlarmSeverity);
_Error				  := _CurrentAlarmSeverity >= TcEventSeverity.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{7bacb92d-1c65-4128-89d7-8fc154a247aa}">
      <Declaration><![CDATA[// Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;

// This method is called by CyclicLogic() as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0:
		LogModeChanges	:= FALSE;
		LogStateChanges := FALSE;

		//Register Submodules

		//Register Components
		RegisterComponent(Component := ComponentOne);
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		IF SUPER^.Initialize() THEN
			Initialize := TRUE;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseAlarm2Args" Id="{f74b26f3-a272-420e-93a0-03bbfe7c0028}">
      <Declaration><![CDATA[METHOD RaiseAlarm2Args
VAR_IN_OUT
	Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
	String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
	String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm	  := Alarm,
								 String_1 := Name,
								 String_2 := String_1,
								 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>