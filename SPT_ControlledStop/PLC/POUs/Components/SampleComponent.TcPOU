<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="SampleComponent" Id="{39de7197-1fb6-432b-8c8b-27fa514d4256}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SampleComponent EXTENDS FB_ComponentBase
VAR
	//Alarms
	ComponentAlarms : ARRAY[1..ALARM_COUNT] OF FB_TcAlarm;
	testError		: BOOL;
END_VAR

VAR CONSTANT
	ALARM_COUNT : INT := 6;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CreateEvents" Id="{b63661ac-39bc-48a5-a0dc-7e1dceb7a9cb}">
      <Declaration><![CDATA[// Initializes event function blocks using this components's name
METHOD PROTECTED CreateEvents

// This method is called by Initialize() as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_CreateAllEventsInClass(Alarms		:= ComponentAlarms,
						 ClassSize	:= SIZEOF(TC_Events.ComponentEvents),
						 pInitEvent := ADR(TC_EVENTS.ComponentEvents.InitReferenceEvent),
						 Prefix		:= Name);

SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{f5c8753c-f9ce-4fc2-ac9e-886032ee1c22}">
      <Declaration><![CDATA[// This method serves as the entry point for all underlying FB logic
METHOD PUBLIC CyclicLogic

// This method should be called cyclically by descendant function blocks by invoking SUPER^.CyclicLogic().  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();

(*
*
*		Code must be after SUPER^.CyclicLogic();
*
*)

(* Update alarm severity from this component *)
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := ComponentAlarms, CurrentSeverity := _CurrentAlarmSeverity);
_Error				  := _CurrentAlarmSeverity >= TcEventSeverity.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{11e869de-f8c6-4429-bc4c-971153785719}">
      <Declaration><![CDATA[// Basic component initialization logic
METHOD PROTECTED Initialize : BOOL;

// This method is called by CyclicLogic() as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Setting the Fault Response Definition here will cause the EM that uses this Component to call the StopControlled method of the EM
_ParentFaultResponseDefinitions[TcEventSeverity.Error] := E_AlarmResponse.Stop_Controlled;

//
Initialize := SUPER^.Initialize();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitoring" Id="{0e03a01f-f3e2-4203-b30d-02f6694e7235}">
      <Declaration><![CDATA[// Provides basic error detection and event handling for this component
METHOD PROTECTED Monitoring

// This method is called cyclically by CyclicLogic()
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF testError AND NOT ComponentAlarms[5].bRaised THEN
	RaiseAlarm2Args(ComponentAlarms[5], CONCAT('Error ID: ', TO_STRING(_ErrorID)), '');
END_IF

SUPER^.Monitoring();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseAlarm2Args" Id="{3b444795-a02f-4331-ab15-8dec5e002fb2}">
      <Declaration><![CDATA[METHOD RaiseAlarm2Args
VAR_IN_OUT
	Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
	String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
	String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm	  := Alarm,
								 String_1 := Name,
								 String_2 := String_1,
								 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{6737e5cc-5e58-4d89-aac0-5f2239d825cd}">
      <Declaration><![CDATA[// Clears error flags and error IDs for this component
METHOD PUBLIC Reset : BOOL

// Typically called by the EMs SUPER^.Clearing Method]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_ClearAllEventsInClass(Alarms := ComponentAlarms);
IF SUPER^.Reset() THEN
	_Error	 := FALSE;
	_ErrorID := 0;
	Reset	 := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>