<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="Machine" Id="{8fa7ef26-a4f9-420b-833f-0f9ff62a8657}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Machine EXTENDS FB_PackML_BaseModule
VAR
	//EMs
	Infeed	: Infeed  := (Name := 'Infeed');
	Process : Process := (Name := 'Process');
	Outfeed : Outfeed := (Name := 'Outfeed');

	//
	_StopRequestFromEM : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{4d2f1a61-941d-4443-933f-0328246ab7e0}">
      <Declaration><![CDATA[// This method serves as the entry point for all underlying FB logic
METHOD PUBLIC CyclicLogic

// This method should be called cyclically by descendant function blocks by invoking SUPER^.CyclicLogic().  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

//Decide when to Stop Machine based on EM Stop Request
IF _StopRequestFromEM AND Outfeed.CurrentState = E_PMLState.Completed THEN
	ChangeState(State := E_PMLCommand.Abort);
	Process.StopRequestToMM := FALSE;
END_IF

//
SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMIPermissions" Id="{fc795dac-120d-4b09-acbb-55428e892907}">
      <Declaration><![CDATA[// Automatically enables and disables HMI control based on the PackML mode
METHOD PROTECTED HMIPermissions

// This method is called cyclically by CyclicLogic()]]></Declaration>
      <Implementation>
        <ST><![CDATA[AllowHMIControl(ThisModuleOnly := TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{15bd16c9-a6c8-4058-8296-b82bf853d82a}">
      <Declaration><![CDATA[// Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;

// This method is called by CyclicLogic() as required
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0: //Register Modules
		RegisterSubmodule(Infeed);
		RegisterSubmodule(Process);
		RegisterSubmodule(Outfeed);

		//Setup Config
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10: // Call the Super to Initialize all SubModules and Components
		IF SUPER^.Initialize() THEN
			Initialize := TRUE;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SubModuleMonitor" Id="{3db2b1a5-eb92-462c-b524-1d4c7aac111f}">
      <Declaration><![CDATA[// This method monitors submodules within this PackML module and initiates fault responses as required
METHOD PROTECTED SubModuleMonitor : BOOL

// This method is called cyclically by CyclicLogic()]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Process.StopRequestToMM THEN
	_StopRequestFromEM := TRUE;
ELSE
	_StopRequestFromEM := FALSE;
END_IF

SUPER^.SubModuleMonitor();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>