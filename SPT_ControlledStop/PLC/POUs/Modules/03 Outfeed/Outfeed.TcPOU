<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="Outfeed" Id="{217672e2-776d-43db-a4bd-00471447b980}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Outfeed EXTENDS FB_PackML_BaseModule
VAR
	testComplete : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicLogic" Id="{71472b5c-82e4-4981-b631-e99c50fd0cc2}">
      <Declaration><![CDATA[// This method serves as the entry point for all underlying FB logic
METHOD PUBLIC CyclicLogic

// This method should be called cyclically by descendant function blocks by invoking SUPER^.CyclicLogic().  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();

//
IF testComplete THEN
	testComplete := FALSE;
	Trace('Outfeed changing state to Complete');
	ChangeState(State := E_PMLCommand.Complete);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{1814c178-8629-4868-8222-3c7807509b08}">
      <Declaration><![CDATA[// Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;

// This method is called by CyclicLogic() as required
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0:
		//Setup Config
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10: // Call the Super 
		IF SUPER^.Initialize() THEN
			Initialize := TRUE;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>